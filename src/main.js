import "./index.css";

const keywords = {
    //===== Ê†∏ÂøÉÂÖÉÁ¥† =====//
    // Ëá™ÁÑ∂ÊôØËßÄ (ÂñÆÂ≠ó+ÈõôÂ≠óË©û)
    natural: {
        single: ["Êµ∑", "Â≥∞", "Â±±", "ÁÅ£", "ÊôØ", "Êûó", "Ê≥â", "Èõ≤", "Â§©", "Êòü", "Áø†", "Á¢ß", "Âµê", "Êµ™", "ÁÅò", "Ê£Æ", "Êπñ", "Ê≤≥", "Â≥∂", "Â≤∏", "Â†§", "Âúí", "Ë∞∑", "Â∂∫", "Â∑í", "Ê±Ä", "Ê¥≤", "Êµ¶", "Êæ§", "ÈúÑ", "Á©π", "Êõ¶", "ÈúΩ", "Áé•", "ÁèÄ", "Áëã", "Áèí", "Áíø", "Áìè", "Ëáª", "Â≥Ø", "Â¥ß", "Â≤±", "Â≤´", "Â¥¥", "Â¥ô"],
        double: ["Áø†Â≥∞", "Á¢ßÊµ∑", "Èõ≤È†Ç", "Â§©Â≥∞", "ÊòüÁÅ£", "ÂµêÂ±±", "Êµ™Êø§", "ÊπñÊôØ", "ÊòüÊ≤≥", "Êô®Êõ¶", "ÁöìÊúà", "ÈáëËºù", "ÈäÄÁÅò", "ÈùíÊ¥≤", "ËóçÁÅ£", "Á∂†Ê¥≤", "‰∏πÈúû", "ÁöìÊµ∑", "ÊæÑÂ§©", "ÁÄÖÊ≥¢", "ÁÅùÊôØ", "ÁÄöÊ¥ã", "Á©πÂÆá", "ÁìèÁíΩ", "ÁëÜËèØ", "Áé•Êπñ", "ÁèÄÊûó", "ËáªÂ≥∞", "Â≤±Âµê", "Â≤´Èõ≤", "Â¥¥ÊôØ", "Â¥ôÂ∫≠", "ÂµøÂ≥∞", "Ëá®Ê∏Ø", "Ëá®Êµ∑", "Ê∏ØÁÅ£", "ÁÅ£Áïî"]
    },

    // Â•¢ËèØÊÑèË±° (ÂñÆÂ≠ó+ÈõôÂ≠óË©û)
    luxury: {
        single: ["Âæ°", "Áöá", "Â∏ù", "Ë±™", "ÁíΩ", "Â∞ä", "ÈÄ∏", "Èâë", "ÈÄ∏", "Èâë", "Ëáª", "Êô∂", "ÈëΩ", "Èáë", "Èºé", "Áàµ", "Èæç", "ËèØ", "ËÄÄ", "È†å", "ÊÇÖ", "Èäò", "ÈÄ∏", "Èâë", "Ëáª", "Êô∂", "ÈëΩ", "Èáë", "Èºé", "Áàµ", "Èæç", "ËèØ", "ËÄÄ", "È†å", "ÊÇÖ", "Èäò"],
        double: ["ÂêõËá®", "Âæ°Áöá", "Â∏ùË±™", "Â∞äÁàµ", "ÈâëÈáë", "ËáªÂìÅ", "Êô∂ÈëΩ", "ÈáëÈºé", "ÈæçÁíΩ", "ËèØËÄÄ", "È†åÊÇÖ", "ÈäòÈÇ∏", "ÈÄ∏Â¢É", "ÈâëÊÇÖ", "ËáªÂ≥∞", "Êô∂ËèØ", "ÈëΩËãë", "ÈáëÂüü", "ÈºéÂ≥∞", "ÁàµÈÇ∏", "ÈæçÂ∫≠", "ËèØÂ∫ú", "ËÄÄÂ∫≠", "È†åÂ∫≠", "ÊÇÖÁíΩ", "ÈäòÂ≥∞"]
    },

    //===== ÁµêÊßãÂÖÉÁ¥† =====//
    // ÂâçÁ∂¥ (Âº∑ÂåñÊ∞£Âã¢)
    prefix: ["THE", "ONE", "GRAND", "ROYAL", "PEAK", "MOUNT", "VISTA", "SKY", "CENTRAL", "UPPER", "LUXE", "ELITE", "PRESTIGE", "OLYMPIA", "PACIFIC", "OCEAN", "HARBOUR"],

    // ÂæåÁ∂¥ (Âª∫ÁØâÈ°ûÂûã/ÊÑèÂ¢É)
    suffix: {
        chinese: ["Ë±™Â∫≠", "Ëªí", "Ëá∫", "Â±Ö", "ÁÅ£", "Ëéä", "ÈÇ∏", "Â≥∞", "Â∫≠", "Ëãë", "Èñ£", "Â±±Ëéä", "ÂêçÈñÄ", "Ë±™Ëãë", "ÈõÖÂ±Ö", "Âæ°Ëãë", "ËèØÂ∫≠", "ÂêçÈÇ∏", "Ë±™ÈÇ∏", "Â£πËôü", "Â∫ú", "Á¨¨", "ÊÆø", "ÂåØ", "Âùä", "Â≤∏", "Êªô", "Ëñà", "ÈÉΩ", "ÁÅ£Áïî", "ÂêçÈëÑ", "Â±ÖÂ∫≠", "Â∫≠Âúí", "ÂêçÁ¨¨", "Âæ°Â∫ú", "Âæ°ÊÆø", "Â∞äÈÇ∏", "ÂêçËªí", "Âæ°Âúí", "ÂêçÂ∫≠", "Âæ°ÊâÄ"],
        english: ["Residence", "Villa", "Park", "Mansion", "Court", "Tower", "Place", "Crest", "Heights", "Garden", "Palace", "Cottage", "Manor", "View", "Horizon", "Peak", "Bay", "Hills", "Cove", "Terrace", "Gate", "Haven", "Rise", "Square", "Chateau", "Domain", "Quay", "Pinnacle", "Paragon", "Legacy", "Haven", "Oasis", "Enclave", "Vista", "Aura", "Elysium", "Eden", "Harmony", "Serenity"]
    },

    luckyNumbers: ["18", "28", "38", "88", "168", "888", "Â£πËôü", "1Ëôü", "III", "VIII", "88Ëôü", "ONE"],

    uncommon: ["Âµê", "Êõ¶", "ÈúΩ", "Â≤´", "ÁÅù", "Ê≥ì", "ÊõÑ", "Êôû", "Áëã", "Áíü", "Áìè", "Áëú", "Áíá", "Áë¢", "Áíò", "Áí®", "Áè∫", "ÈÄ∏", "Ëáª", "Ëòä", "Áùø", "ÁÜô", "Á∂Ω", "ËÉ§", "ÊöÑ"]
};

function generateName(style) {
    const getRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];
    const getLayer = (category, layer) => getRandom(keywords[category][layer]);

    const firstUncommon = getRandom(keywords.uncommon)
    const secondUncommon =
        getRandom([getRandom(keywords.uncommon.filter((value) => value !== firstUncommon)), getRandom(keywords.suffix.chinese.filter(onlyOne))])
    const uncommonDouble = [firstUncommon, secondUncommon].join("")

    function getChineseDouble(firstArr, SecondArr) {
        const firstUncommon = getRandom(firstArr)
        const secondUncommon =
            getRandom(SecondArr.filter((value) => value !== firstUncommon))
        const result = [firstUncommon, secondUncommon].join("")
        return result;
    }

    let name = '';

    switch (style) {
        case 'luxury':
            name = [
                getRandom([getChineseDouble(keywords.luxury.single, keywords.luxury.single), getLayer("luxury", "single") + getLayer("natural", "single"), getLayer("natural", "double"), getLayer("luxury", "single")]),
                getRandom(keywords.suffix.chinese),
            ].join('');
            break;

        case 'international':
            name = [
                getRandom(keywords.prefix),
                getRandom(keywords.suffix.english)
            ].join(' ');
            break;
        case 'number':
            name = [
                getRandom([uncommonDouble, getChineseDouble(keywords.luxury.single, keywords.luxury.single), getLayer("luxury", "single") + getLayer("natural", "single"), getLayer("natural", "double")]),
                getRandom(keywords.luckyNumbers)
            ].join('');
            break;
        case 'uncommon':
            name = getRandom([uncommonDouble, uncommonDouble + "¬∑" + getRandom(keywords.suffix.chinese.filter(onlyDouble))])
            break;
    }

    return name.replace(/\s+/g, ' ').trim(); // Ê∏ÖÁêÜÂ§öÈ§òÁ©∫Ê†º
}

function onlyOne(value) {
    return value.length === 1;
}

function onlyDouble(value) {
    return value.length === 2
}


function generateNames() {
    const style = document.getElementById('style-select').value;
    const results = document.getElementById('results');
    results.innerHTML = '';

    for (let i = 0; i < 5; i++) {
        let name = '';
        name = generateName(style);

        const card = document.createElement('div');
        card.className = 'name-card';
        card.innerHTML = `
                    <p class="name-text">${name}</p>
                    <p class="name-style">${getStyleLabel(style)}</p>
                `;
        card.addEventListener('click', () => copyToClipboard(name));
        results.appendChild(card);
    }
}

function getStyleLabel(style) {
    const labels = {
        luxury: 'üè∞ Â•¢ËèØÂ∞äË≤¥Á≥ªÂàó',
        international: 'üåç ÂúãÈöõÈ¢®Â∞öÁ≥ªÂàó',
        number: 'üî¢ Êï∏Â≠óÁ≥ªÂàó',
        uncommon: 'ÁîüÂÉªÂ≠óÁ≥ªÂàó',
    };
    return labels[style] || '';
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text);
    showCopyNotice();
}

function showCopyNotice() {
    const notice = document.getElementById('copyNotice');
    notice.style.opacity = '1';
    setTimeout(() => notice.style.opacity = '0', 2000);
}


document.getElementById("generate").addEventListener("click", generateNames);